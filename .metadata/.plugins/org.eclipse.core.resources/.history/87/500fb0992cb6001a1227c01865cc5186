import java.util.Arrays;

public class Benchmarking {

	static void insertionSort(int[] A) {
		// Sort the array A into increasing order.
		int itemsSorted; // Number of items that have been sorted so far.
		for (itemsSorted = 1; itemsSorted < A.length; itemsSorted++) {
			// Assume that items A[0], A[1], ... A[itemsSorted-1]
			// have already been sorted. Insert A[itemsSorted]
			// into the sorted part of the list.
			int temp = A[itemsSorted]; // The item to be inserted.
			int loc = itemsSorted - 1; // Start at end of list.
			while (loc >= 0 && A[loc] > temp) {
				A[loc + 1] = A[loc]; // Bump item from A[loc] up to loc+1.
				loc = loc - 1; // Go on to next location.
			}
			A[loc + 1] = temp; // Put temp in last vacated space.
		}
	}
	/* (Eck, 2019, pp.361-362) */

	public static void main(String[] args) {
		int n1 = 1000;
		int n2 = 10000;
		int n3 = 100000;
		int[] array1 = new int[n1];
		int[] array2;
		int i = 0;
		while (i < array1.length) {
			/*
			 * int n = 1; array1[i] = n; n++;
			 */
			array1[i] = (int) Integer.MAX_VALUE * (int) (1000 * Math.random());
			i++;
		}
		array2 = array1;
		// System.out.println(Arrays.toString(array1));
		// System.out.println(Arrays.toString(array2));
		long startTime = System.currentTimeMillis();
		insertionSort(array1);
		long runTime = System.currentTimeMillis() - startTime;
		System.out.println(Arrays.toString(array1));
		System.out.println(runTime);
		startTime = System.currentTimeMillis();
		Arrays.sort(array2);
		runTime = System.currentTimeMillis() - startTime;
		System.out.println(Arrays.toString(array2));
		System.out.println(runTime);

	}
}
