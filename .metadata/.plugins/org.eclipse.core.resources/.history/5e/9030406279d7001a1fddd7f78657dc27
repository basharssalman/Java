import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

public class Server {

	static int LISTENING_PORT = 7000;

	public static void main(String[] args) {

		ServerSocket serverSocket;
		try {
			serverSocket = new ServerSocket(LISTENING_PORT);
		} catch (Exception e) {
			System.out.println("Failed to create listening socket.");
			return;
		}
		System.out.println("Listening on port " + LISTENING_PORT);
		try {
			while (true) {
				Socket connection = serverSocket.accept();
				System.out.println("\nConnection from " + connection.getRemoteSocketAddress());
				ConnectionThread thread = new ConnectionThread(connection);
				thread.start();
			}
		} catch (Exception e) {
			System.out.println("Server socket shut down unexpectedly!");
			System.out.println("Error: " + e);
			System.out.println("Exiting.");
		}
	}

	private static void handleConnection(Socket connection) {
		try {

			File file = new File("D:\\words.txt");
			Scanner in = new Scanner(connection.getInputStream());
			PrintWriter output = new PrintWriter(connection.getOutputStream());
			OutputStream out = connection.getOutputStream();
			while (true) {
				if (!in.hasNextLine())
					break;
				String line = in.nextLine();
				if (line.trim().length() == 0)
					break;
				
				if (file.isDirectory()) 
					sendFile(file, out);
				else if(file.exists() && file.canRead()) 
					System.out.println("200 OK");
					//sendFile(file, out);
				
				System.out.println("   " + line);
				}
		} catch (Exception e) {
			System.out.println("Error while communicating with client: " + e);
		} finally { // make SURE connection is closed before returning!
			try {
				connection.close();
			} catch (Exception e) {
			}
			System.out.println("Connection closed.");
		}
	}

	private static String getMimeType(String fileName) {
		int pos = fileName.lastIndexOf('.');
		if (pos < 0) // no file extension in name
			return "x-application/x-unknown";
		String ext = fileName.substring(pos + 1).toLowerCase();
		if (ext.equals("txt"))
			return "text/plain";
		else if (ext.equals("html"))
			return "text/html";
		else if (ext.equals("htm"))
			return "text/html";
		else if (ext.equals("css"))
			return "text/css";
		else if (ext.equals("js"))
			return "text/javascript";
		else if (ext.equals("java"))
			return "text/x-java";
		else if (ext.equals("jpeg"))
			return "image/jpeg";
		else if (ext.equals("jpg"))
			return "image/jpeg";
		else if (ext.equals("png"))
			return "image/png";
		else if (ext.equals("gif"))
			return "image/gif";
		else if (ext.equals("ico"))
			return "image/x-icon";
		else if (ext.equals("class"))
			return "application/java-vm";
		else if (ext.equals("jar"))
			return "application/java-archive";
		else if (ext.equals("zip"))
			return "application/zip";
		else if (ext.equals("xml"))
			return "application/xml";
		else if (ext.equals("xhtml"))
			return "application/xhtml+xml";
		else
			return "x-application/x-unknown";
		// Note: x-application/x-unknown is something made up;
		// it will probably make the browser offer to save the file.
	}
private static void sendErrorResponse(int errorCode, OutputStream socketOut) {
		
		String protocol = "HTTP/1.1";
		String statusDescription = " ";
		String statusMessage = "";
		
		switch (errorCode) {
		case 400:
			statusDescription += "400 Bad Request";
			statusMessage += "The syntax of the request is bad.";
			break;
		case 403:
			statusDescription += "403 Forbidden";
			statusMessage += "The server does not have permission to read the file.";
			break;
		case 404:
			statusDescription += "404 Not Found";
			statusMessage += "The resource that you requested does not exist on this server.";
			break;
		case 500:
			statusDescription += "500 Internal Server Error";
			statusMessage += "There has been an error in handling the connection.";
			break;
		case 501:
			statusDescription += "501 Not Implemented";
			statusMessage += "The command received has not been implemented.";
			break;
		default:
			statusDescription += "500 Internal Server Error";
			statusMessage += "There has been an error in handling the connection.";
			break;
		}
}

	private static void sendFile(File file, OutputStream socketOut) throws IOException {
		File file1 = new File("");
		InputStream in = new BufferedInputStream(new FileInputStream(file1));
		OutputStream out = new BufferedOutputStream(socketOut);
		while (true) {
			int x = in.read(); // read one byte from file
			if (x < 0)
				break; // end of file reached
			out.write(x); // write the byte to the socket
		}
		out.flush();
	}

	private static class ConnectionThread extends Thread {
		Socket connection;

		ConnectionThread(Socket connection) {
			this.connection = connection;
		}

		public void run() {
			handleConnection(connection);
		}
	}

}
